service: api-users

# Use the serverless-webpack plugin to transpile ES6
plugins:
  # - serverless-webpack

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  layerStack: my-common-libs
  layerLibs: Libs
  layerNodejs: Nodejs
  
  # webpack:
  #   webpackConfig: ./webpack.config.js
  #   includeModules:
  #     forceExclude:
  #       - ''
  #   packager: 'yarn'

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-2

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}ApiGatewayRestApiRootResourceId

  environment:
    userTable: ${file(../resources/dynamodb/serverless.yml):custom.tableName.userTable}
    noteTable: ${file(../resources/dynamodb/serverless.yml):custom.tableName.noteTable}
    userPoolId: ${cf:cognito-${self:custom.stage}.UserPoolId}

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'Fn::ImportValue': ${self:custom.stage}-UserTableArn
        - 'Fn::ImportValue': ${self:custom.stage}-NoteTableArn
    - Effect: Allow
      Action:
        - cognito-sync:*
        - cognito-identity:*
      Resource: arn:aws:cognito-identity:*:*:*
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource: arn:aws:cognito-idp:*:*:*

package:
  exclude:
    - ./node_modules/**
    - ./tests/**
    - LICENSE
    - README.md
    - yarn.lock
    - package-lock.json

functions:
  - ${file(./functions.yml)}
