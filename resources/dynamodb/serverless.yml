service: dynamodb

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

  # Set the table name here so we can use it while testing locally
  tableName:
    productTable: ${self:custom.stage}-${file(../env.yml):tableName.product}
    categoryTable: ${self:custom.stage}-${file(../env.yml):tableName.category}
    campaignTable: ${self:custom.stage}-${file(../env.yml):tableName.campaign}
    noticeTable: ${self:custom.stage}-${file(../env.yml):tableName.notice}
    holidayTable: ${self:custom.stage}-${file(../env.yml):tableName.holiday}
    dealTable: ${self:custom.stage}-${file(../env.yml):tableName.deal}
    userTable: ${self:custom.stage}-${file(../env.yml):tableName.user}
 
  # Billing modes setting for production and other stages. We don't want to pay extra for development stages, therefore set dev-stages to pay_per_request
  billingModes:
    prod: PROVISIONED
    default: PAY_PER_REQUEST
  billingMode: ${self:custom.billingModes.${self:custom.stage}, self:custom.billingModes.default}
  # Set our DynamoDB throughput for prod stage only
  tableThroughput: 5

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-2

package:
  exclude:
    - ./node_modules/**
    - LICENSE
    - README.md

resources:
  - ${file(./resources/dynamodb-table.yml)}